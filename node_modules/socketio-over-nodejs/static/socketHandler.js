                var channel = new DataChannel(); // DataChannel.js

                // "ondatachannel" is fired for each new data channel
                channel.ondatachannel = function(channel00) {
                    var alreadyExist = document.getElementById(channel00.id);
                    if (alreadyExist) return;

                    var tr = document.createElement('tr');
                    tr.setAttribute('id', channel00.owner);
                    tr.innerHTML = '<td>' + channel00.id + '</td>' +
                        '<td><button class="join" id="' + channel00.id + '">Join</button></td>';

                    channelsList.insertBefore(tr, channelsList.firstChild);

                    // when someone clicks table-row; joining the relevant data channel
                    tr.onclick = function() {

                        // manually joining a data channel
                        channel.join({
                            id: this.querySelector('.join').id,
                            owner: this.id
                        });

                        channelsList.style.display = 'none';
                    };
                };

                // overriding "openSignalingChannel" to use WebSockets as signaling gateway!
                channel.openSignalingChannel = function(config) {
                    console.log(config);
                    // var SIGNALING_SERVER = 'https://webrtc-signaling.nodejitsu.com:443/';
                    var SIGNALING_SERVER = '/'; //'https://www.webrtc-experiment.com:8000/';

                    var channel = config.channel || this.channel || location.href.replace(/\/|:|#|%|\.|\[|\]/g, '');
                    var sender = Math.round(Math.random() * 9999999999) + 9999999999;

                    io.connect(SIGNALING_SERVER).emit('new-channel', {
                        channel: channel,
                        sender: sender
                    });

                    var socket = io.connect(SIGNALING_SERVER + channel);
                    socket.channel = channel;

                    socket.on('connect', function() {
                        if (config.callback) config.callback(socket);
                    });

                    socket.send = function(message) {
                        socket.emit('message', {
                            sender: sender,
                            data: message
                        });
                    };

                    socket.on('message', config.onmessage);
                };

                // a text message or data
                channel.onmessage = function(data, userid, latency) {
                    appendDIV(data);

                    console.debug(userid, 'posted', data);
                    console.log('latency:', latency, 'ms');
                };

                // on data connection gets open
                channel.onopen = function() {
                    if (document.getElementById('chat-input')) document.getElementById('chat-input').disabled = false;
                    if (document.getElementById('file')) document.getElementById('file').disabled = false;
                    if (document.getElementById('open-channel')) document.getElementById('open-channel').disabled = true;
                };

                // sending/receiving file(s)
                // channel.autoSaveToDisk = false;
                channel.onFileProgress = function(packets, uuid) {
                    appendDIV(uuid + ': ' + packets.remaining + '..', 'file', fileProgress);
                };

                channel.onFileSent = function(file) {
                    appendDIV(file.name + ' sent.', fileProgress);
                };

                channel.onFileReceived = function(fileName) {
                    appendDIV(fileName + ' received.', fileProgress);
                };

                document.getElementById('file').onchange = function() {
                    channel.send(this.files[0]);
                };

                var chatOutput = document.getElementById('chat-output'),
                    fileProgress = document.getElementById('file-progress');

                function appendDIV(data, parent) {
                    var div = document.createElement('div');
                    div.innerHTML = data;

                    if (!parent) chatOutput.insertBefore(div, chatOutput.firstChild);
                    else fileProgress.insertBefore(div, fileProgress.firstChild);

                    div.tabIndex = 0;
                    div.focus();

                    chatInput.focus();
                }

                var chatInput = document.getElementById('chat-input');
                chatInput.onkeypress = function(e) {
                    if (e.keyCode !== 13 || !this.value) return;
                    appendDIV(this.value);

                    // sending text message
                    channel.send(this.value);

                    this.value = '';
                    this.focus();
                };

                // users presence detection
                channel.onleave = function(userid) {
                    var message = 'A user whose id is ' + userid + ' left you!';
                    appendDIV(message);
                    console.warn(message);
                };

                var channelsList = document.getElementById('channels-list');

                // data-channel name to uniquely identify your connection
                var channel_name = location.hash.substr(1) || 'data-channel';

                document.getElementById('open-channel').onclick = function() {
                    this.disabled = true;

                    // opening new data channel
                    channel.open(channel_name);
                };

                // searching for existing channels
                channel.connect(channel_name);